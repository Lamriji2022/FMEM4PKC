import time
import random

e=65537 # for all security levels

# RSA1024 (80 security level)
p80=8848587944222328531083032308855816294720468610664598838702705332974037285300246480672785711167321565791768077382735171706419739033232740852638634921307991
q80=4467707603787711255262925145868770746343585779333497738918156891134274929387004231093274761838460634333201736217015849852917856539280691636159916227632071
n80=p80*q80
d80=33872936983187808234616313847389118438443011962864780027850359948250949131508337517552866408335451891809459433805062640246424680206732895739560738574704859466362057689305927539590135374283815960895094662573485512081313991135004358594634046391911036741436576667031911801557070668292347151438551525743692564073

# RSA2048 (112 security level)
p112=141246869063773204193367533583526048566541074914036508160230592001206984558441952807712254466911340603915553248757567335298873912490566084845324656699819748151747619168677293644847618878366103806098605596009519552328516935443018559058218282450019669430862338715723696346444708780159162711428920873445935706681
q112=100803815681377710449770633330797820486733240748467652503352669415302066209147018407210983943315194216922815440946619792678411674016212684530656661793793252618945812497715272503985822617792315662974027484693843045911126017381797999131663846845192169437457687645499503969621381521123723681555572232269554086531
n112=p112*q112
d112=1617461477876084437164879194145237843140856855127879015514153825315840019956369838911310018610182524766947884869806541762915513308807389704249493315089169193053615931647562189741845867385416612502134028152637765571416180346636868669224017196084924329551423891712521314358571163084624648824459037957406860520633778646847730122152103720520311381274992971321467431731616441523265704771031580521743316784558853211022762930279990718570688390288495565930112698143686300294852448319226428871261622922132799809214984603110374202585052158014623000278708692093240256540137368789273146644847694041342117856534167836885157767473

# RSA3072 (128 security level)
p128=2391351713113090344463196915362500708859187101850635959744955044475134344356022077589973378347751016314213129202678641664228921473051296695765663602777210770849642940321574535275680009231857253185379138854572766108580853145986754949274395564758648659313375723962430231075654186416447898096994452039599489812873607228854749585510374930641955955310041956591886078213450350816603155424653650523158020768363944110432696977500906716842614451263407894475040766431359727
q128=1788163747280927711820895571214971095052507669753800302406970020488761647692319105425987704186724278485046488530938198660800310974804601340433569854192688132341419085431986208470544424998652348119739607663729793882888054153911055112866452853730387123425685484904260666806585708774461100894586251039581812672571309973209006660524302343089548886677433057949265552239250448446603417755090199090727487045634787987088022952558054931553413459218825070706791544092598823
n128=p128*q128
d128=1097463728387152740849935621524881867484892902850593098525675412296946517625171721791773475239893715295765169319853833297438391744119659606060848262070332764525197894381550732219655103415772163901720818228597796425955295337034024534358408588170876782706269948915854289071510457492784765264146099656069868860348558604118628575441213106473147433203193144366199305448856694044691620966319807340816044165996250643610422466341056419835082384423923022052323881217593962502288329921438490413936652450350426173669636810262754408129737872584771748074029735883070799387213510128161841304314464888622279431628013329067970131148773027347961364213729995330030318924573263078175849968844190834047243530484997976616220125699333853942052457421877950662331175342879737127358680742790723062191593386426908983684499906079638241602922768868926838822226466992478244050422704087923769246614393319840960231871912942970024368929476749138348330437393

# RSA7680 (192 security level)
p
q
n192=p192*q192
d

# RSA15360 (256 security level)
p
q
n256=p256*q256
d

## MMI-Euclid method

def inverse_mod_Euclid(k, p):
    if k == 0:
        raise ZeroDivisionError('division par zero')

    if k < 0:
        return p - inverse_mod_Euclid(-k, p)

    # Algorithme euclidien étendu.
    s, old_s = 0, 1
    t, old_t = 1, 0
    r, old_r = p, k

    while r != 0:
        quotient = old_r // r
        old_r, r = r, old_r - quotient * r
        old_s, s = s, old_s - quotient * s
        old_t, t = t, old_t - quotient * t

    gcd, x, y = old_r, old_s, old_t

    assert gcd == 1
    assert (k * x) % p == 1

    return x % p

######################################################## ME-Methods ####################################################

################################################## Left-to-Right Binary Method

## Calculate ME with LR Binary method
def LR_BinaryM(x,k,p):
    k = list(bin(k)[2:])
    x1 = 1
    for i in range(len(k)-1 ,-1,-1):
        x1  = x1**2 % p
        if int(k[i]) == 1:
            x1 = x1 * x % p
    return x1

################################################## Window Method

## List of the digits in the base 'b' representation of n 
def Win_Rep(k, base):
    digits = []
    while k:
        digits.append(k % base)
        k //= base
    return digits

## Calculate ME with Window method
def ME_Window(x,k,w,p):
    base = 2 << (w - 1)

    # Precompute the table of exponents

    table = [1] * base
    for i in range(1, base):
        table[i] = table[i - 1] * x % p
    r = 1
    for digit in reversed(Win_Rep(k, base)):
        for i in range(w):
            r = r * r % p
        if digit:
            r = r * table[digit] % p

    return r




################################################## NAF Method

## NAF reoresentation of k
def naf(k):
    Naf = []
    i=0
    while k>0:
        if k%2 == 1:
            Naf.append(2 - k%4)
            k = k - Naf[i]
        else:
            Naf.append(0)
        k = k//2
        i = i+1
    return Naf

# Calculate ME with WNAF method
def ME_NAF(m,k, p):
    Naf=naf(k)
        
    x = m
    y = inverse_mod_Euclid(m, p)
    for j in range(len(Naf)-2,-1,-1):
        x = x*x % p
        if Naf[j] == 1:
            x = x*m % p
        if Naf[j] == -1:
            x = x*y % p
            
    return x

############################################# WNAF method

def mods(d,w):
    t=pow(2,w)
    if (d % t) >= t - 1:
        return (d % t) - t
    else:
        return d % t

# WNAF representation of k    

def w_naf(k,w):
    wNaf=[]
    wNafT=[]
    i=0
    while k>0:
        if k%2 == 1:
            wNaf.append(mods(k,w))
            k = k - wNaf[i]
        else:
            wNaf.append(0)
        k = k//2
        i = i+1
    for i in wNaf:
        wNafT.append(abs(i))
        
    wNafT = set(wNafT)
    return (wNaf,list(set(wNafT)))

# Calculate ME with WNAF method
def ME_WNAF(x,k,w,p):
        wNaf = w_naf(k,w)[0]
        wNafT = w_naf(k,w)[1]
        R={}
        R1={}
        for l in wNafT:
            b = (x**l) % p
            R[l] = b
            R1[l] = inverse_mod_Euclid(b,p)
        exp = 1
        for j in range(len(wNaf)-1,-1,-1):
            exp = (exp*exp) % p
            if wNaf[j] > 0:
                exp = (exp*R[wNaf[j]]) % p
            if wNaf[j] < 0:
                exp = (exp * R1[-wNaf[j]]) % p
            
        return exp

############################################# ZR method

## Alternate-Zeckendorf Representation of an integer k
def ZechendorfRep(k):
    F = [1,2,3]
    ZR =[]
    l = len(bin(k)[2:]) +1
    for i in range(3,l):
        F.append(F[i-1]+2*F[i-2])
    for j in range(l-1,-1,-1):
        if (k - F[j] >= 0):
            ZR.append(1)
            k = k - F[j]
        else:
            ZR.append(0)
    return ZR[::-1],l

## Calculate ME with Zechendorf method
def ME_ZR(x,k,n):
    ZR,l = ZechendorfRep(k)
    U = x
    V = x**2 % n
    W = U*V %n
    temp = 1
    z = U**ZR[0] * V**(ZR[1]) * W**(ZR[2]) %n
    for i in range(3,l):
        temp = V
        V = W
        W = temp**2 * W %n
        if ZR[i] == 1:
            z = z*W % n
    return z


############################################Test

levelS = input("Enter security level : 80, 112, 128, 192 or 256 ")

#the values of the parameters according to the security level
if int(levelS) == 80:
    n=n80
    d=d80
    m=random.randint(n-e, n)
    c=pow(m,e,n)
if int(levelS) == 112:
    n=n112
    d=d112
    m=random.randint(n-e, n)
    c=pow(m,e,n)
if int(levelS) == 128:
    n=n128
    d=d128
    m=random.randint(n-e, n)
    c=pow(m,e,n)
if int(levelS) == 192:
    n=n192
    d=d192
    m=random.randint(n-e, n)
    c=pow(m,e,n)
if int(levelS) == 256:
    n=n256
    d=d256
    m=random.randint(n-e, n)
    c=pow(m,e,n)

###### Choose ME method
Meth = input("Enter the name of the method used to calculate ME (choose a name among the following names: LRBM, WM, NAFM, WNAFM, AZRM ) :  ")

#######Decryption
iter = 10
if Meth == "LRBM":
    t1 = time.time()
    for l in range(iter):
        b = LR_BinaryM(c,d,n)
    t2 = time.time()

if Meth == "WM":
    t1 = time.time()
    for l in range(iter):
        b = ME_Window(c,d,5,n)
    t2 = time.time()
if Meth == "NAFM":
    t1 = time.time()
    for l in range(iter):
        b = ME_NAF(c,d,n)
    t2 = time.time()
if Meth == "WNAFM":
    t1 = time.time()
    for l in range(iter):
        b = ME_WNAF(c,d,4,n)
    t2 = time.time()
if Meth == "AZRM":
    t1 = time.time()
    for l in range(iter):
        b = ME_ZR(c,d,n)
    t2 = time.time()
print("Execution time of ",Meth," method in ",levelS," security level is :",(t2 - t1)/iter)
